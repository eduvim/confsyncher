
call plug#begin('~/.config/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'

Plug 'junegunn/fzf' , {'dir': '~/.fzf' , 'do': './install -all'}
Plug 'fatih/vim-go', {'do': 'GoInstallBinaries'}

Plug 'Raimondi/delimitMate'

Plug 'preservim/tagbar'
Plug 'ryanoasis/vim-devicons'

Plug 'itchyny/lightline.vim'
Plug 'luochen1990/rainbow'

Plug 'sheerun/vim-polyglot'

" delete this two when nvim
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

" javascript deoplete support
Plug 'jelera/vim-javascript-syntax'
Plug 'mxw/vim-jsx'
Plug 'elzr/vim-json'

" install ptgrep , it's a golang project !!!
" go get -u github.com/monochromegane/the_platinum_searcher/...
Plug 'yegappan/grep'

Plug 'preservim/nerdcommenter'
Plug 'chuling/equinusocio-material.vim'
Plug 'sheerun/vim-polyglot'

Plug 'prabirshrestha/asyncomplete.vim'
Plug 'prabirshrestha/asyncomplete-gocode.vim'
Plug 'dense-analysis/ale'
Plug 'andreypopp/asyncomplete-ale.vim'

Plug 'lifepillar/vim-solarized8'
call plug#end()
set encoding=UTF-8
set noshowmode
set expandtab
set shiftwidth=8
set softtabstop=8
set number
set rnu 
set hlsearch
se cursorline
se t_Co=256
set termguicolors
syntax enable
filetype plugin on
set clipboard=unnamedplus

 
if exists('+termguicolors')
  let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
  let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"
  set termguicolors
endif

let g:lightline = {
      \ 'colorscheme': 'solarized',
      \ 'active': {
      \   'left': [ [ 'mode', 'paste' ],
      \             [ 'readonly', 'filename', 'modified', 'charvaluehex' ] ]
      \ },
      \ 'component': {
      \   'charvaluehex': '0x%B'
      \ },
      \ }

call asyncomplete#register_source(asyncomplete#sources#gocode#get_source_options({
    \ 'name': 'gocode',
    \ 'allowlist': ['go'],
    \ 'completor': function('asyncomplete#sources#gocode#completor'),
    \ 'config': {
    \    'gocode_path': expand('~/go/bin/gocode')
    \  },
    \ 'linter': ['gofmt', 'govet', 'golint'] ,
    \ }))

autocmd FileType go map <C-b> :GoReferrers<CR>
autocmd FileType go map <C-d> :GoDef<CR>
autocmd FileType go map <C-q> :GoDefPop<CR>
autocmd FileType go map <C-r> :GoRename<CR>
autocmd filetype go inoremap <buffer> . .<C-x><C-o>
" autocmd FileType go set omnifunc=go#complete#Complete
autocmd FileType go let g:go_auto_type_info = 1
autocmd FileType go let g:go_auto_sameids = 1
autocmd FileType go let g:go_gpls_enabled = 1
autocmd FileType go let g:go_metalinter_autosave = 0
autocmd FileType go let g:go_fmt_autosave=1
autocmd FileType go let g:go_fmt_command= 'goimports'
autocmd FileType go let g:go_metalinter_autosave_enabled = ['bodyclose']
autocmd FileType go let g:go_doc_popup_window = 1
autocmd FileType go imap <C-,> <C-x><C-o>
autocmd FileType go cmap <C-P> <Up>
autocmd FileType go cmap <C-N> <Down>

autocmd StdinReadPre * let s:std_in=1

nmap <F8> :TagbarToggle<CR>
noremap <F2> :set hlsearch! hlsearch?<CR>
map <C-n> :NERDTreeToggle<CR>
inoremap <expr> <Tab>   pumvisible() ? "\<C-n>" : "\<Tab>"
inoremap <expr> <S-Tab> pumvisible() ? "\<C-p>" : "\<S-Tab>"
inoremap <expr> <cr>    pumvisible() ? asyncomplete#close_popup() : "\<cr>"
autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
let asyncomplete_auto_popup = 0
let NERDTreeShowHidden=1
let g:rainbow_active = 1 
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'

let g:ale_completion_enabled = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
let g:solarized_termcolors=256
nnoremap <silent> <leader>c} V}:call NERDComment('x', 'toggle')<CR>
nnoremap <silent> <leader>c{ V{:call NERDComment('x', 'toggle')<CR>

set completeopt=longest,menuone,popup,preview,noselect

" let g:equinusocio_material_style = 'darker'
" colorscheme equinusocio_material
set background=dark
colorscheme solarized8_flat
