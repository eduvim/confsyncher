
call plug#begin('~/.config/.vim/plugged')

Plug 'scrooloose/nerdtree'
Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'tpope/vim-fugitive'
" install ptgrep , it's a golang project !!!
" go get -u github.com/monochromegane/the_platinum_searcher/...
Plug 'yegappan/grep'

Plug 'junegunn/fzf' , {'dir': '~/.fzf' , 'do': './install -all'}
Plug 'fatih/vim-go', {'do': 'GoInstallBinaries'}

Plug 'Raimondi/delimitMate'

Plug 'preservim/tagbar'
Plug 'ryanoasis/vim-devicons'

Plug 'luochen1990/rainbow'
 Plug 'itchyny/lightline.vim'

" delete this two when nvim
Plug 'roxma/nvim-yarp'
Plug 'roxma/vim-hug-neovim-rpc'

Plug 'sheerun/vim-polyglot'

" Checkers
Plug 'dense-analysis/ale'

Plug 'tpope/vim-speeddating'
Plug 'kjssad/quantum.vim'
call plug#end()
set encoding=UTF-8
set noshowmode
set nocompatible
set expandtab
set smarttab
set number
set rnu 
set hlsearch
se cursorline
se t_Co=256
set termguicolors
set title
let &titlestring='%t - nvim'

syntax enable
filetype plugin indent on
set clipboard=unnamedplus

let &t_8f = "\<Esc>[38;2;%lu;%lu;%lum"
let &t_8b = "\<Esc>[48;2;%lu;%lu;%lum"

let g:lightline = {
      \ 'colorscheme': 'quantum'
      \}

autocmd FileType javascript setlocal ts=2 sts=2 sw=2 expandtab
autocmd FileType go setlocal sw=8 ts=8 expandtab
autocmd FileType go map <C-r> :GoReferrers<CR>
autocmd FileType go map <C-d> :GoDef<CR>
autocmd FileType go map <C-t> :GoDefPop<CR>
autocmd FileType go map <C-m> :GoRename<CR>
autocmd FileType go set omnifunc=go#complete#Complete
autocmd FileType go let g:go_auto_type_info = 1
autocmd FileType go let g:go_auto_sameids = 1
autocmd FileType go let g:go_gpls_enabled = 1
autocmd FileType go let g:go_metalinter_autosave = 1
autocmd FileType go let g:go_fmt_autosave=1
autocmd FileType go let g:go_fmt_command= 'goimports'
autocmd FileType go let g:go_metalinter_autosave_enabled = ['bodyclose']
autocmd FileType go let g:go_doc_popup_window = 1

autocmd FileType go imap <C-,> <C-x><C-o>
autocmd FileType go cmap <C-P> <Up>
autocmd FileType go cmap <C-N> <Down>
autocmd FileType go inoremap <buffer> . .<C-x><C-o>

autocmd StdinReadPre * let s:std_in=1

nmap <F8> :TagbarToggle<CR>
noremap <F2> :set hlsearch! hlsearch?<CR>
map <C-n> :NERDTreeToggle<CR>

autocmd! CompleteDone * if pumvisible() == 0 | pclose | endif
let asyncomplete_auto_popup = 0
let NERDTreeShowHidden=1
let g:rainbow_active = 1 
let g:ale_sign_error = '⤫'
let g:ale_sign_warning = '⚠'

let g:ale_completion_enabled = 0
let g:go_highlight_build_constraints = 1
let g:go_highlight_extra_types = 1
let g:go_highlight_fields = 1
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_operators = 1
let g:go_highlight_structs = 1
let g:go_highlight_types = 1
nnoremap <silent> <leader>c} V}:call NERDComment('x', 'toggle')<CR>
nnoremap <silent> <leader>c{ V{:call NERDComment('x', 'toggle')<CR>

set completeopt=longest,menuone,popup,preview,noselect

set background=light
colorscheme quantum
